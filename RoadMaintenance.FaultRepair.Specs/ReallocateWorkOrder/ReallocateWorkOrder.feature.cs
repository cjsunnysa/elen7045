// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RoadMaintenance.FaultRepair.Specs.ReallocateWorkOrder
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ReallocateWorkOrder")]
    public partial class ReallocateWorkOrderFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ReallocateWorkOrder.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ReallocateWorkOrder", "In order to enable me to balance workload\r\nAs a dispatcher\r\nI want to be able to " +
                    "reallocate work orders to different teams", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Reallocate work order to team with no other work orders scheduled")]
        public virtual void ReallocateWorkOrderToTeamWithNoOtherWorkOrdersScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reallocate work order to team with no other work orders scheduled", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table1.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table1.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table1.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 8
 testRunner.Given("I have a repair team with id 1 and the following schedule", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
#line 13
 testRunner.And("I have a repair team with id 2 and the following schedule", ((string)(null)), table2, "And ");
#line 15
 testRunner.When("I reallocate the work order with id 0 to team with id 2 to start at \"2014-01-06 0" +
                    "8:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the result should be \"successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table3.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table3.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 17
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table4.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
#line 21
 testRunner.And("the following resultant schedule for team with id 2", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Reallocate work order to team with no conflicting work orders scheduled")]
        public virtual void ReallocateWorkOrderToTeamWithNoConflictingWorkOrdersScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reallocate work order to team with no conflicting work orders scheduled", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table5.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table5.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table5.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 26
 testRunner.Given("I have a repair team with id 1 and the following schedule", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table6.AddRow(new string[] {
                        "3",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table6.AddRow(new string[] {
                        "4",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 31
 testRunner.And("I have a repair team with id 2 and the following schedule", ((string)(null)), table6, "And ");
#line 35
 testRunner.When("I reallocate the work order with id 0 to team with id 2 to start at \"2014-01-06 0" +
                    "8:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("the result should be \"successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table7.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table7.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 37
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table8.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table8.AddRow(new string[] {
                        "3",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table8.AddRow(new string[] {
                        "4",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 41
 testRunner.And("the following resultant schedule for team with id 2", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Reallocate work order to team with conflicting work orders scheduled")]
        public virtual void ReallocateWorkOrderToTeamWithConflictingWorkOrdersScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reallocate work order to team with conflicting work orders scheduled", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table9.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table9.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table9.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 48
 testRunner.Given("I have a repair team with id 1 and the following schedule", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table10.AddRow(new string[] {
                        "3",
                        "2014-01-06 09:00",
                        "2014-01-06 15:00"});
            table10.AddRow(new string[] {
                        "4",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table10.AddRow(new string[] {
                        "5",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 53
 testRunner.And("I have a repair team with id 2 and the following schedule", ((string)(null)), table10, "And ");
#line 58
 testRunner.When("I reallocate the work order with id 0 to team with id 2 to start at \"2014-01-06 0" +
                    "8:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then("the result should be \"unsuccessful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table11.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table11.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table11.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 60
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table12.AddRow(new string[] {
                        "3",
                        "2014-01-06 09:00",
                        "2014-01-06 15:00"});
            table12.AddRow(new string[] {
                        "4",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table12.AddRow(new string[] {
                        "5",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 65
 testRunner.And("the following resultant schedule for team with id 2", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
