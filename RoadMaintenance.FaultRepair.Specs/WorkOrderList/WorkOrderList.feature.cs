// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RoadMaintenance.FaultRepair.Specs.WorkOrderList
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WorkOrderList")]
    public partial class WorkOrderListFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WorkOrderList.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WorkOrderList", "In order to be able to schedule and allocate work orders\r\nAs a dispatcher\r\nI want" +
                    " to be able to get a list of unallocated work orders", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All work orders are scheduled")]
        public virtual void AllWorkOrdersAreScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All work orders are scheduled", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Status"});
            table1.AddRow(new string[] {
                        "0",
                        "scheduled"});
            table1.AddRow(new string[] {
                        "1",
                        "scheduled"});
            table1.AddRow(new string[] {
                        "2",
                        "scheduled"});
            table1.AddRow(new string[] {
                        "3",
                        "scheduled"});
            table1.AddRow(new string[] {
                        "4",
                        "scheduled"});
#line 8
 testRunner.And("these work orders exist", ((string)(null)), table1, "And ");
#line 15
 testRunner.When("I request a list of unscheduled work orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("I receive no work orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All work orders are unscheduled")]
        public virtual void AllWorkOrdersAreUnscheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All work orders are unscheduled", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Status"});
            table2.AddRow(new string[] {
                        "0",
                        "issued"});
            table2.AddRow(new string[] {
                        "1",
                        "issued"});
            table2.AddRow(new string[] {
                        "2",
                        "issued"});
            table2.AddRow(new string[] {
                        "3",
                        "issued"});
            table2.AddRow(new string[] {
                        "4",
                        "issued"});
#line 20
 testRunner.And("these work orders exist", ((string)(null)), table2, "And ");
#line 27
 testRunner.When("I request a list of unscheduled work orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Status"});
            table3.AddRow(new string[] {
                        "0",
                        "issued"});
            table3.AddRow(new string[] {
                        "1",
                        "issued"});
            table3.AddRow(new string[] {
                        "2",
                        "issued"});
            table3.AddRow(new string[] {
                        "3",
                        "issued"});
            table3.AddRow(new string[] {
                        "4",
                        "issued"});
#line 28
 testRunner.Then("I receive these work orders", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Work orders with mixed statuses")]
        public virtual void WorkOrdersWithMixedStatuses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work orders with mixed statuses", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Status"});
            table4.AddRow(new string[] {
                        "0",
                        "issued"});
            table4.AddRow(new string[] {
                        "1",
                        "created"});
            table4.AddRow(new string[] {
                        "2",
                        "issued"});
            table4.AddRow(new string[] {
                        "3",
                        "issued"});
            table4.AddRow(new string[] {
                        "4",
                        "verified"});
            table4.AddRow(new string[] {
                        "5",
                        "closed"});
#line 38
 testRunner.And("these work orders exist", ((string)(null)), table4, "And ");
#line 46
 testRunner.When("I request a list of unscheduled work orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Status"});
            table5.AddRow(new string[] {
                        "0",
                        "issued"});
            table5.AddRow(new string[] {
                        "2",
                        "issued"});
            table5.AddRow(new string[] {
                        "3",
                        "issued"});
#line 47
 testRunner.Then("I receive these work orders", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
