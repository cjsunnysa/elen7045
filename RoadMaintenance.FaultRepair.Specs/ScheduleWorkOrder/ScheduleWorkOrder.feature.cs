// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RoadMaintenance.FaultRepair.Specs.ScheduleWorkOrder
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ScheduleWorkOrder")]
    public partial class ScheduleWorkOrderFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ScheduleWorkOrder.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ScheduleWorkOrder", "In order to schedule a work order\r\nAs a dispatcher\r\nI should be able to assign it" +
                    " a repair team by allocating it to a repair teams schedule and be able to resche" +
                    "dule and unschedule that work order", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign a work order to a repair team with no other work orders scheduled")]
        public virtual void AssignAWorkOrderToARepairTeamWithNoOtherWorkOrdersScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a work order to a repair team with no other work orders scheduled", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Duration"});
            table1.AddRow(new string[] {
                        "0",
                        "24"});
#line 8
 testRunner.And("I have a work order", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
#line 11
 testRunner.And("I have a repair team with id 1 and the following schedule", ((string)(null)), table2, "And ");
#line 13
 testRunner.When("I assign the work order to the team with id 1 for \"2014-01-03 08:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("the result should be \"successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table3.AddRow(new string[] {
                        "0",
                        "2014-01-03 08:00",
                        "2014-01-07 16:00"});
#line 15
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign a work order to a repair team with no conflicting work orders scheduled")]
        public virtual void AssignAWorkOrderToARepairTeamWithNoConflictingWorkOrdersScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a work order to a repair team with no conflicting work orders scheduled", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Duration"});
            table4.AddRow(new string[] {
                        "3",
                        "6"});
#line 21
 testRunner.And("I have a work order", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table5.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table5.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table5.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 24
 testRunner.And("I have a repair team with id 1 and the following schedule", ((string)(null)), table5, "And ");
#line 29
 testRunner.When("I assign the work order to the team with id 1 for \"2014-01-09 15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the result should be \"successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table6.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table6.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table6.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
            table6.AddRow(new string[] {
                        "3",
                        "2014-01-09 15:00",
                        "2014-01-10 13:00"});
#line 31
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign a work order to a repair team with conflicting work orders scheduled")]
        public virtual void AssignAWorkOrderToARepairTeamWithConflictingWorkOrdersScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a work order to a repair team with conflicting work orders scheduled", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Duration"});
            table7.AddRow(new string[] {
                        "3",
                        "6"});
#line 40
 testRunner.And("I have a work order", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table8.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table8.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table8.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 43
 testRunner.And("I have a repair team with id 1 and the following schedule", ((string)(null)), table8, "And ");
#line 48
 testRunner.When("I assign the work order to the team with id 1 for \"2014-01-07 15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("the result should be \"unsuccessful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table9.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table9.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table9.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 50
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Reschedule a work order allocated to a repair team with no conflicting work order" +
            "s scheduled")]
        public virtual void RescheduleAWorkOrderAllocatedToARepairTeamWithNoConflictingWorkOrdersScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reschedule a work order allocated to a repair team with no conflicting work order" +
                    "s scheduled", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Duration"});
            table10.AddRow(new string[] {
                        "0",
                        "6"});
#line 58
 testRunner.And("I have a work order", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table11.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table11.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table11.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 61
 testRunner.And("I have a repair team with id 1 and the following schedule", ((string)(null)), table11, "And ");
#line 66
 testRunner.When("I assign the work order to the team with id 1 for \"2014-01-09 15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.Then("the result should be \"successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table12.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table12.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
            table12.AddRow(new string[] {
                        "0",
                        "2014-01-09 15:00",
                        "2014-01-10 13:00"});
#line 68
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Reschedule a work order allocated to a repair team with conflicting work orders s" +
            "cheduled")]
        public virtual void RescheduleAWorkOrderAllocatedToARepairTeamWithConflictingWorkOrdersScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reschedule a work order allocated to a repair team with conflicting work orders s" +
                    "cheduled", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Duration"});
            table13.AddRow(new string[] {
                        "0",
                        "6"});
#line 76
 testRunner.And("I have a work order", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table14.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table14.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table14.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 79
 testRunner.And("I have a repair team with id 1 and the following schedule", ((string)(null)), table14, "And ");
#line 84
 testRunner.When("I assign the work order to the team with id 1 for \"2014-01-07 15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then("the result should be \"unsuccessful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table15.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table15.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table15.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 86
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unassign a work order allocated to a repair team")]
        public virtual void UnassignAWorkOrderAllocatedToARepairTeam()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unassign a work order allocated to a repair team", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 93
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Duration"});
            table16.AddRow(new string[] {
                        "0",
                        "6"});
#line 94
 testRunner.And("I have a work order", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table17.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table17.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table17.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 97
 testRunner.And("I have a repair team with id 1 and the following schedule", ((string)(null)), table17, "And ");
#line 102
 testRunner.When("I unassign the work order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.Then("the result should be \"successful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table18.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table18.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 104
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unassign a work order not allocated to a repair team")]
        public virtual void UnassignAWorkOrderNotAllocatedToARepairTeam()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unassign a work order not allocated to a repair team", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
 testRunner.Given("I am a \"Dispatcher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Duration"});
            table19.AddRow(new string[] {
                        "3",
                        "6"});
#line 111
 testRunner.And("I have a work order", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table20.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table20.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table20.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 114
 testRunner.And("I have a repair team with id 1 and the following schedule", ((string)(null)), table20, "And ");
#line 119
 testRunner.When("I unassign the work order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then("the result should be \"unsuccessful\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkOrderID",
                        "StartTime",
                        "EndTime"});
            table21.AddRow(new string[] {
                        "0",
                        "2014-01-06 08:00",
                        "2014-01-06 14:00"});
            table21.AddRow(new string[] {
                        "1",
                        "2014-01-07 08:00",
                        "2014-01-08 12:00"});
            table21.AddRow(new string[] {
                        "2",
                        "2014-01-08 14:00",
                        "2014-01-09 13:00"});
#line 121
 testRunner.And("the following resultant schedule for team with id 1", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
