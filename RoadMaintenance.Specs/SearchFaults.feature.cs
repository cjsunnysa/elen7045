// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RoadMaintenance.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SearchFaults")]
    public partial class SearchFaultsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SearchFaults.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SearchFaults", "In order to ensure existing faults aren\'t duplicated\r\nAs a call center operator\r\n" +
                    "I want to enter a street address, suburb or postal code and receive a list of al" +
                    "l open and recently closed faults surrounding that address.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find open and recently closed faults by street name")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void FindOpenAndRecentlyClosedFaultsByStreetName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find open and recently closed faults by street name", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I am on the Fault Search page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I enter \'8th Street\' as the street name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Latitude",
                        "Longitude",
                        "Street",
                        "Suburb",
                        "PostCode",
                        "StatusId",
                        "Status",
                        "TypeId",
                        "Type",
                        "EstimatedCompletionDate",
                        "DateCompleted"});
            table1.AddRow(new string[] {
                        "1",
                        "null",
                        "null",
                        "8th St",
                        "Sandton",
                        "2196",
                        "1",
                        "Awaiting Inspection",
                        "1",
                        "Pothole",
                        "null",
                        "null"});
            table1.AddRow(new string[] {
                        "27",
                        "null",
                        "null",
                        "10th St",
                        "Sandton",
                        "2195",
                        "1",
                        "Awaiting Inspection",
                        "1",
                        "Pothole",
                        "null",
                        "null"});
            table1.AddRow(new string[] {
                        "47",
                        "-26.160226",
                        "27.975857",
                        "8th Street",
                        "Randburg",
                        "2195",
                        "5",
                        "Repaired",
                        "3",
                        "Traffic Light",
                        "15-05-2015",
                        "16-05-2015"});
            table1.AddRow(new string[] {
                        "50",
                        "-26.160226",
                        "27.975857",
                        "8th Str",
                        "Randburg",
                        "2195",
                        "5",
                        "Repaired",
                        "4",
                        "Road Marking",
                        "01-05-2015",
                        "01-05-2015"});
#line 10
 testRunner.And("These faults exist", ((string)(null)), table1, "And ");
#line 16
 testRunner.When("I press the Search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Latitude",
                        "Longitude",
                        "Street",
                        "Suburb",
                        "PostCode",
                        "StatusId",
                        "Status",
                        "TypeId",
                        "Type",
                        "EstimatedCompletionDate",
                        "DateCompleted"});
            table2.AddRow(new string[] {
                        "1",
                        "null",
                        "null",
                        "8th St",
                        "Sandton",
                        "2196",
                        "1",
                        "Awaiting Inspection",
                        "1",
                        "Pothole",
                        "null",
                        "null"});
            table2.AddRow(new string[] {
                        "47",
                        "-26.160226",
                        "27.975857",
                        "8th Street",
                        "Randburg",
                        "2195",
                        "5",
                        "Repaired",
                        "3",
                        "Traffic Light",
                        "15-05-2015",
                        "16-05-2015"});
#line 17
 testRunner.Then("The results should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
