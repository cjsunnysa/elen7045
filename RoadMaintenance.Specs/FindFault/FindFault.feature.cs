// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RoadMaintenance.FaultLogging.Specs.FindFault
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FindFault")]
    public partial class FindFaultFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FindFault.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FindFault", "In order to report existing fault information to callers\r\nAs a call-center operat" +
                    "or\r\nI want to be able to retrieve fault details by entering a fault identificati" +
                    "on number.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve a fault by fault identification number: correct dash format")]
        [NUnit.Framework.CategoryAttribute("GreenPath")]
        public virtual void RetrieveAFaultByFaultIdentificationNumberCorrectDashFormat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve a fault by fault identification number: correct dash format", new string[] {
                        "GreenPath"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I am a \'CallCenterOperator\' user role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I enter \'282A10B0-103E-40F9-8D01-320D002EFF9F\' as the fault identification number" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Street",
                        "CrossStreet",
                        "Suburb",
                        "PostCode",
                        "StatusId",
                        "TypeId",
                        "EstimatedCompletionDate"});
            table1.AddRow(new string[] {
                        "202947AF-130F-4494-8C50-DB84A93648E1",
                        "Sandton Dr",
                        "Grayston Dr",
                        "Sandton",
                        "2196",
                        "1",
                        "1",
                        "2015-01-01"});
            table1.AddRow(new string[] {
                        "46BF992F-B00C-4D76-BDD0-CCB6B993E8EF",
                        "10th St",
                        "",
                        "Sandton",
                        "2196",
                        "4",
                        "2",
                        "2015-02-01"});
            table1.AddRow(new string[] {
                        "282A10B0-103E-40F9-8D01-320D002EFF9F",
                        "8th Street",
                        "",
                        "Randburg",
                        "2195",
                        "1",
                        "3",
                        "2015-03-01"});
            table1.AddRow(new string[] {
                        "E5354BB8-A1BB-49AF-81C1-19BF5FEC4D12",
                        "Hill Street",
                        "Malibongwe",
                        "Randburg",
                        "2195",
                        "5",
                        "1",
                        "2015-04-01"});
#line 10
 testRunner.And("These faults exist", ((string)(null)), table1, "And ");
#line 16
 testRunner.When("I press the Find button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Street",
                        "CrossStreet",
                        "Suburb",
                        "PostCode",
                        "StatusId",
                        "TypeId",
                        "EstimatedCompletionDate"});
            table2.AddRow(new string[] {
                        "282A10B0-103E-40F9-8D01-320D002EFF9F",
                        "8th Street",
                        "",
                        "Randburg",
                        "2195",
                        "1",
                        "3",
                        "2015-03-01"});
#line 17
 testRunner.Then("The results should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve a fault by fault identification number: no format")]
        public virtual void RetrieveAFaultByFaultIdentificationNumberNoFormat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve a fault by fault identification number: no format", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I am a \'CallCenterOperator\' user role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.And("I enter \'282A10B0103E40F98D01320D002EFF9F\' as the fault identification number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Street",
                        "CrossStreet",
                        "Suburb",
                        "PostCode",
                        "StatusId",
                        "TypeId",
                        "EstimatedCompletionDate"});
            table3.AddRow(new string[] {
                        "202947AF-130F-4494-8C50-DB84A93648E1",
                        "Sandton Dr",
                        "Grayston Dr",
                        "Sandton",
                        "2196",
                        "1",
                        "1",
                        "2015-01-01"});
            table3.AddRow(new string[] {
                        "46BF992F-B00C-4D76-BDD0-CCB6B993E8EF",
                        "10th St",
                        "",
                        "Sandton",
                        "2196",
                        "4",
                        "2",
                        "2015-02-01"});
            table3.AddRow(new string[] {
                        "282A10B0-103E-40F9-8D01-320D002EFF9F",
                        "8th Street",
                        "",
                        "Randburg",
                        "2195",
                        "1",
                        "3",
                        "2015-03-01"});
            table3.AddRow(new string[] {
                        "E5354BB8-A1BB-49AF-81C1-19BF5FEC4D12",
                        "Hill Street",
                        "Malibongwe",
                        "Randburg",
                        "2195",
                        "5",
                        "1",
                        "2015-04-01"});
#line 24
 testRunner.And("These faults exist", ((string)(null)), table3, "And ");
#line 30
 testRunner.When("I press the Find button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Street",
                        "CrossStreet",
                        "Suburb",
                        "PostCode",
                        "StatusId",
                        "TypeId",
                        "EstimatedCompletionDate"});
            table4.AddRow(new string[] {
                        "282A10B0-103E-40F9-8D01-320D002EFF9F",
                        "8th Street",
                        "",
                        "Randburg",
                        "2195",
                        "1",
                        "3",
                        "2015-03-01"});
#line 31
 testRunner.Then("The results should be", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve a fault by fault identification number: lower case letters")]
        public virtual void RetrieveAFaultByFaultIdentificationNumberLowerCaseLetters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve a fault by fault identification number: lower case letters", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I am a \'CallCenterOperator\' user role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.And("I enter \'282a10b0-103e-40f9-8d01-320d002eff9f\' as the fault identification number" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Street",
                        "CrossStreet",
                        "Suburb",
                        "PostCode",
                        "StatusId",
                        "TypeId",
                        "EstimatedCompletionDate"});
            table5.AddRow(new string[] {
                        "202947AF-130F-4494-8C50-DB84A93648E1",
                        "Sandton Dr",
                        "Grayston Dr",
                        "Sandton",
                        "2196",
                        "1",
                        "1",
                        "2015-01-01"});
            table5.AddRow(new string[] {
                        "46BF992F-B00C-4D76-BDD0-CCB6B993E8EF",
                        "10th St",
                        "",
                        "Sandton",
                        "2196",
                        "4",
                        "2",
                        "2015-02-01"});
            table5.AddRow(new string[] {
                        "282A10B0-103E-40F9-8D01-320D002EFF9F",
                        "8th Street",
                        "",
                        "Randburg",
                        "2195",
                        "1",
                        "3",
                        "2015-03-01"});
            table5.AddRow(new string[] {
                        "E5354BB8-A1BB-49AF-81C1-19BF5FEC4D12",
                        "Hill Street",
                        "Malibongwe",
                        "Randburg",
                        "2195",
                        "5",
                        "1",
                        "2015-04-01"});
#line 38
 testRunner.And("These faults exist", ((string)(null)), table5, "And ");
#line 44
 testRunner.When("I press the Find button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Street",
                        "CrossStreet",
                        "Suburb",
                        "PostCode",
                        "StatusId",
                        "TypeId",
                        "EstimatedCompletionDate"});
            table6.AddRow(new string[] {
                        "282A10B0-103E-40F9-8D01-320D002EFF9F",
                        "8th Street",
                        "",
                        "Randburg",
                        "2195",
                        "1",
                        "3",
                        "2015-03-01"});
#line 45
 testRunner.Then("The results should be", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
